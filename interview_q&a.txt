Apex technical screening - Walmart

https://medium.com/@poonkuzhali_98336/walmart-global-tech-interview-experience-cdc3509408ea

https://jaynil-gaglani.hashnode.dev/frontend-interview-experience-at-walmart#heading-how-did-i-get-to-know-about-this-opportunity

Q1. Tell me about yourself?

Vijay Nimmagadda here, Austin, Texas.

=========================================================================================

Q1. My previous work experience?
I am a core UI Developer with 12+ years of experience building .com websites for different organizations using HTML5, CSS3,
JavaScript, Angular 18, React.js, and Redux. 
In the past 2 years, I worked on the React migration team, where I converted the .net pages to react on united.com. 
Frontend is React, and used ATMOS (Own library) components used company wide.

Worked on Security features for users where they can manage there account like Forgot password, Forgot MileagePlus number, 
security questions, Sign-in features, Miles-Pooling, United Club pass,  Recent Activity, dashboard updates and 
KTN(Known Traveler Number), Accessibility guidelines features on united.com.

used middleware such as redux-saga to handle asynchronous tasks such as API calls, data fetching, and impure actions in a more organized and efficient way.

The new initiative worked on Miles-Pooling( points you get after traveling), TSA Precheck, Account security and management features, and Under18.

Previously worked with Accelerator team for Visa Inc. remediation of MBDA modules like Application Management, Account Management, Portfolio Management, Analytics, Recurring billing, Virtual Terminal, etc for bank users like Wells Fargo,  Bank of America, etc

Capital Group worked on DAVIS Project. Davis stands for Data visualization where we build different highcharts using react and integrate into the AEM., the backend is Java. Previously I worked on Creative Workbench, a writing tool where articles are published on capital group websites.

At Cerner Corporation worked on the medical examination forms.

In Office Depot worked on black Friday reporting.

Satinos Technologies created a tax portal and a schoomin website for the Vignan schools.

--------------------------------------------------------------------------------

q2. my projects and my tech stack were discussed. 

United Airlines - React migration project
Visa - Accelerator team - MBDA remediation of modules
Capital Group - DAVIS and CWB.

Tech Stack : FrontEnd is react.js, javascript, HTML5, css3, node.js, redux, redux-saga.


q3. The interviewer put forth basic ES6 questions and code snippets for me to discuss on the output. 
I wasn’t prepared for any tech discussion in this call. 
However, the questions were very basic involving Closure, Hoisting and Object methods and I managed to answer those.


Closure?

    Closure
    -------
        - if any inner function holding the outer function data, then such scenario called as closure.
 
 
<script>
    function fun_one(){
        var x = 10;
        var y = 20;
        return ()=>{
            console.log(x);
            console.log(y);
        }
    };
    console.dir( fun_one() );  //0: Closure (fun_one) {x: 10, y: 20}
  
</script>
-->


-----------------------------------
2. What is Hoisting in JS?
	• accessing any variables before declaration.
	• variable hoisting because of "var" keyword.
	• we can overcome variable hoisting with "let" keyword.
	• getting undefined instead of error called variable hoisting.

    How it works?
	console.log(data);    //var : undefined(variable hoisting)   
	                      //let : ReferenceError: Cannot access 'data' before initialization
	                      //const : SyntaxError: Missing initializer in const declaration
const data;


----------------------------------
3. Object methods ?

General Methods
// Copies properties from a source object to a target object
Object.assign(target, source)

// Creates an object from an existing object
Object.create(object)

// Returns an array of the key/value pairs of an object
Object.entries(object)

// Creates an object from a list of keys/values
Object.fromEntries()

// Returns an array of the keys of an object
Object.keys(object)

// Returns an array of the property values of an object
Object.values(object)

// Groups object elements according to a function
Object.groupBy(object, callback)


-----------------------------------

Javascript engine, 


what is asynchronous/synchronous functions?


In JavaScript, synchronous functions execute in sequence, one after the other. Each operation must complete before the next one begins.
This can be simple to understand but can lead to performance issues if a function takes a long time to execute, 
as it will block the execution of subsequent code.

Asynchronous functions, on the other hand, allow the program to continue running while waiting for certain tasks to complete. 
This is achieved using callbacks, promises, or async/await. 
Asynchronous functions are non-blocking, meaning that they don't halt the execution of other code. 
This is particularly useful for tasks like fetching data from an API or handling user input, where waiting for a response 
could otherwise freeze the application. 

------------------------------------------------------------------------------------------

How can you Optimize Performance in React application?
1. Memoization with useMemo and useCallback:  Use this hooks to memoize values and, reducing unnecessary recalculations.
2. Optimizing Renders with React.Fragment: Use it to avoid unnecessary wrapper elements that could cause additional DOM nodes.
3. Lazy loading with React.lazy: Use it to load components lazily, reducing the intial bundle size and improving intial loading performance.
4. Code splitting: Employ code splitting to divide your application into smaller chunks that are loaded on demand, improving initial load times.
5. Optimizing Images and Assets:  Compress and optimize images, use responsive images and leverage lazy loading for images to reduce network and rendering overhead.

Error boundaries?

Error boundaries are React components that catch JavaScript errors anywhere in their child component tree, log those errors, 
and display a fallback UI instead of the component tree that crashed. 
Error boundaries catch errors during rendering, in lifecycle methods, and in constructors of the whole tree below them.


What is debouncing?  
Forcefully stopping all the previous execution and considering latest request.
Debouncing is not predefined. Ex: Bank ATM money withdraw and deposit.


Throttling?
Throttling in JavaScript is a technique used to limit the execution rate of a function. 
It ensures that a function is called at most once within a specified time interval. 
This is useful for controlling the frequency of events that can fire rapidly, such as scrolling, resizing, or repeated user input, 
preventing performance issues and improving responsiveness. 

JavaScript

function throttle(func, limit) {
  let inThrottle;
  return function() {
    const args = arguments;
    const context = this;
    if (!inThrottle) {
      func.apply(context, args);
      inThrottle = true;
      setTimeout(() => inThrottle = false, limit);
    }
  }
}

function myFunction() {
  console.log("Function called");
}

const throttledFunction = throttle(myFunction, 1000); // Calls myFunction at most once per 1000ms

window.addEventListener('scroll', throttledFunction);

------------------------------------------


The need for 
useState, 
useEffect, 
useMemo, 
useCallback, 
useRef, and
useReducer and their usage in a component was discussed with some sample code snippets. 

useState: Manages state in functional components.
useEffect: Manages side effects in functional components.
useContext: Consumes context in functional components.
useReducer: Manage state with a reducer function, For More complex state management.
useRef: Accesses DOM elements or stores mutable values.
useCallback: performance improvement usecase
useMemo: performance improvement usecase.



The appropriate usage of React native components was tested, also analysed the knowledge of package dependencies and their usage
(Difference between react-native, react-native-web and react-dom).

"React Native" is a framework for building mobile apps using JavaScript,

while "React DOM" is the library used to render React components within a web browser, and
 
"React Native Web" acts as a bridge, allowing you to use React Native components within a web application, 
essentially letting you write code once and deploy it on both mobile and web platforms with some limitations;


---------------------------------------------------

1. Coding question: 

/* create custom hooks checkout process items that are displayed on the cart itself who fetches the information from api */
// set up own schema.

import {useState, useEffect} from 'react';
type fetchResponse = {
  data: Object,
  error: Object,
  loading: boolean
}
export function useFetch(url: string): fetchResponse {
  const [data, setData] = useState(null);
  const [error, setError] = useState(null);
  const [loading, setLoading] = useState(false);
  const callApi = async (url) => {
     try {
       setLoading(true)
       const response = await fetch(url);
       const data = await response.json();
       setData(data);
     }catch(err){
      setError(err);
     }finally{
      setLoading(false);
     }
  }
  useEffect(()=>{
    callApi(url);
  },[url])
  return {data, error, loading};



2. What is useCallback and useMemo hook?
	useCallback and useMemo are React hooks used for performance optimization. 
    While they serve similar purposes, they have distinct use cases:
	useCallback
	useCallback is used to memoize functions. 
    It returns a memoized version of the callback function that only changes if one of the dependencies has changed.
    Key points:
	• Prevents unnecessary re-creation of functions
	• Useful when passing callbacks to optimized child components
	• Syntax: useCallback(fn, dependencies)
	Example usage:
	
	javascript
	const memoizedCallback = useCallback(() => { doSomething(a, b);}, [a, b]);

----------------------------------------------------------------------------------------
	useMemo
	useMemo is used to memoize values. 
    It returns a memoized value that only recomputes when one of its dependencies changes.
    Key points:
	• Optimizes expensive calculations
	• Caches the result of a computation
	• Syntax: useMemo(() => computeExpensiveValue(a, b), [a, b])
	Example usage:
	
	javascript
	const memoizedValue = useMemo(() => {
  return computeExpensiveValue(a, b);
}, [a, b]);
	Differences
	Aspect	    useCallback	        useMemo
	Purpose 	Memoizes functions	Memoizes values
	Returns	    Memoized function	Memoized value
	Use case	Optimizing callback functions	Optimizing expensive computations
	
		
	
4. Explain the architecture in the diagram?
A React architecture, as depicted in the diagram, is primarily based on a component-based structure where the UI is broken down into smaller, reusable components, each managing its own state and rendering independently; data flows unidirectionally from parent to child components, allowing for easier debugging and maintainability, with state management libraries like Redux often used to handle complex application-wide state updates; key elements include: UI Components (the visual elements like buttons, forms, lists), Pages/Views (which assemble components to form different sections of the application), API Services (for fetching data from external sources), State Management (centralized mechanism to manage application data across components), and Routing (handling navigation between different parts of the application) - all working together to create a dynamic and responsive user interface. 

Key points about the React architecture:

Component-based:
The core idea is to build the UI by composing smaller, reusable components that can be nested within each other. 

Unidirectional data flow:
Data flows from parent components to child components, ensuring a predictable state update mechanism. 

Virtual DOM:
React uses a virtual DOM to efficiently calculate the minimal changes needed to update the actual DOM, optimizing performance. 

State management:
While components can manage their own local state, for complex applications, a global state management library like Redux is often used to maintain consistent data across the application. 

How the diagram illustrates the architecture:

Components:
Represented by boxes labeled "UI Components" which can be simple elements like a button or more complex sections like a user profile. 

Data flow:
Arrows indicate the direction of data flow, typically from parent components to their children. 

API interaction:
The "API Services" block shows how components fetch data from external sources. 

State management (Redux example):
A centralized "Store" is often used to manage application-wide state, with actions triggering updates to the store. 


	
5. How many stories can you work in a sprint? 2 stories depending on the Acceptance criteria.
	
6. Who decides the points for each story? Scrum master and team discuss in sprint planning. 1, 3, 5, 7

7. How do you manage state?
The useState hook enables functional components to manage state.
useState() working: useState() function accept the initial state value as the parameter and returns an array with 2 elements:
1. The first element is the current state value(count in this code).
2. Second element is the function that is used to update the state(setCount in this code).
The concept of assign array elements to individual variables is called array destructing.

import React, {useState} from "react";
function UseState(){
    //array destructing
    const [count, setCount] = useState(0);
    const increment = () =>{
        setCount(count + 1);
    }
}

return (
    <div>
    <p>Count:{count}</p>
        <button onClick={increment}>Click</button>
    </div>
);
export default UseState;



8. Have you used customHooks?

Yes, custom Hooks have been utilized in React development. 
They serve as a mechanism for extracting and reusing stateful logic across multiple components. 
By encapsulating logic within a custom Hook, it promotes cleaner, more maintainable code and reduces redundancy.

Example
Here's a basic example of a custom Hook for managing a counter:
Code

import { useState } from 'react';

function useCounter(initialValue = 0) {
  const [count, setCount] = useState(initialValue);

  const increment = () => {
    setCount(count + 1);
  };

  const decrement = () => {
    setCount(count - 1);
  };

  return { count, increment, decrement };
}

export default useCounter;


9. Have you worked on Atomic design?

Yes, "Atomic Design" is a widely used methodology for building design systems, where designers break down interfaces into basic 
components ("atoms") that can be combined to create more complex elements ("molecules", "organisms") - so
many designers and developers have likely worked with it in some capacity when creating user interfaces for websites or applications.
	
    
    
10. Have you used GraphQL?

GraphQL is a query language and runtime for APIs that lets clients request specific data from multiple sources in a single API call. 
It's used to build fast, flexible APIs that are developer-friendly.

11. Have you worked on CI/CD pipeline?

CI/CD (Continuous Integration/Continuous Deployment) pipeline as an automated process in software development. 
It involves integrating code changes frequently, running automated tests, and deploying code to production quickly and consistently.

12. How do you setup the application for your team?
use Create React App (CRA) to quickly generate a new project structure, 
establish a consistent folder structure, implement a linting tool like ESLint for code quality, 
set up a version control system like Git, and consider using a state management library 
like Redux if needed, all while defining clear coding standards and guidelines for your team to follow

13. Can you use named component instead of default keyword?

Yes, named components can be used instead of the default keyword in JavaScript and React. 
Both named and default exports are valid ways to export components, but they have different use cases and implications.

Comparison
Feature                  Named Exports           Default Exports
Number of Exports        Multiple                 Single
Import Syntax           { ComponentName }         ComponentName (any name)
Use Cases           Exporting multiple related values   Exporting the main component/value
Refactoring         More robust to renaming         Less robust to renaming


14. Can you useEffect hook instead of useCallback and UseMemo?

It is technically possible to use useEffect to mimic the behavior of useCallback and useMemo in some limited scenarios, 
but it is not recommended as a general practice due to potential performance issues and code complexity. 
useCallback and useMemo are specifically designed for memoization, while useEffect is meant for handling side effects.


15. What is redux? Redux-saga?

Redux is a JavaScript library used for state management in applications, providing a centralized way to store and update data across 
components, while Redux-saga is a middleware library that sits on top of Redux, specifically designed to handle asynchronous 
operations (like API calls) and manage "side effects" within a Redux application, 
making them easier to test and organize by using ES6 generators to create cleaner asynchronous flows. 


16. What testing library did you work on? JEST, Enzyme, RTL

React Testing Library (RTL) is a testing utility focused on testing React components from the perspective of the end-user. 
Rather than testing implementation details, RTL prioritizes testing the behavior and output of components as a user would experience 
them. It encourages writing tests that are more resilient to refactoring and better reflect the actual functionality of the application.
 RTL works by querying the DOM for elements in a way that simulates how users interact with the application, 
such as finding elements by their role, text content, or labels. It is often used in conjunction with test runners like Jest.


17. What is useMemo?

useMemo is a React hook that caches the result of a function so it doesn't need to be recalculated every time a component re-renders. 
This can improve the performance of an application. 

When to use useMemo
useMemo is especially useful when you have expensive computations that are triggered frequently, such as when working with large datasets. 
Benefits of useMemo 
Optimizes performance, 
Reduces unnecessary computations, 
Improves user experience, and 
Ensures that an application remains fast and responsive. 

18. What is UseEffect?
The useEffect Hook in React is used to perform side effects in functional components.
For example, data fetching from API, subscriptions or any other operation that needs to be performed after the component has been rendered.

What is useEffect() hook and when to use it?
useEffect()  is called after the component renders. Example: side effects.
useEffect() function will accept 2 parameter: (Effect function, dependency array)

19. What is UseCallback?

//callback function
The useCallback hook is used to memoize callback functions. 
This means that the function provided to useCallback will only be recreated if one of it dependencies has changed.
This is particularly useful when passing callbacks to child components that are optimized with React.memo, 
as it can prevent unnecessary renders.


20. What is useRef?

The useRef hook is used to access and interact with DOM elements directly and to persist mutable values across renders without 
causing re-renders.


How can useRef be used to store mutuable values?
useRef can store any mutuable values, and changes to the ref do not cause re-renders.

21. What is the error code for failing ?

	Client-Side Errors (4xx)
	400 Bad Request
	This is one of the most common error codes, indicating that the server cannot process the request due to a client error13. It typically means the request was incorrectly formatted or contains invalid parameters.
	401 Unauthorized
	This error occurs when the API doesn't recognize the user or the user lacks proper authentication credentials3. It often means you need to provide an API key or token to access the resource1.
	403 Forbidden
	Similar to 401, but in this case, the server understands the request but refuses to authorize it. This could be due to insufficient permissions3.
	404 Not Found
	This error indicates that the requested resource doesn't exist on the server34. It could be due to an incorrect URL or a resource that has been moved or deleted1.
	429 Too Many Requests
	This error occurs when you've exceeded the rate limit for API calls within a specified time frame4.
	Server-Side Errors (5xx)
	500 Internal Server Error
	This is a generic server error, indicating that something went wrong on the server's end34. It could be due to various issues, including server misconfiguration or application errors1.
	502 Bad Gateway
	This error suggests that the server, while acting as a gateway or proxy, received an invalid response from an upstream server1.
	503 Service Unavailable
	This error indicates that the server is temporarily unable to handle the request. It could be due to server overload, maintenance, or other temporary issues4.
	504 Gateway Timeout
	Similar to 502, but in this case, the gateway or proxy server didn't receive a timely response from the upstream server1.
	When implementing error handling in your API, it's best practice to use these standard HTTP status codes to the extent possible. They provide a universally understood way to communicate the nature of the error5. Additionally, you should include more detailed error information in the response body to help developers debug the issue.
	Remember, the specific error code returned should accurately reflect the nature of the failure. This helps API consumers understand and effectively handle different types of errors in their applications.
	
	


Component architecture, APPLIcation architecture, performance-optimizing, redux

How to put architecture, what it does

Design system

==================

import {useState, useEffect} from 'react';
type fetchResponse = {
  data: Object,
  error: Object,
  loading: boolean
}
export function useFetch(url: string): fetchResponse {
  const [data, setData] = useState(null);
  const [error, setError] = useState(null);
  const [loading, setLoading] = useState(false);

  const callApi =async (url) => {
     try {
       setLoading(true)
       const response = await fetch(url);
       const data = await response.json();
       setData(data);
     }catch(err){
      setError(err);
     }finally{
      setLoading(false);
     }
  }
  useEffect(()=>{
    callApi(url);
  },[url])

  return {data, error, loading};
}

